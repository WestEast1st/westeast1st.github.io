{"version":3,"file":"component---src-templates-tag-js-c8caa67923990707123a.js","mappings":"wKAwFA,UAhFiB,IAA4B,IAAD,MAA1B,YAAEA,EAAW,KAAEC,GAAM,EACrC,MAAMC,GAAkC,QAAtB,EAAAD,EAAKE,KAAKC,oBAAY,aAAtB,EAAwBC,QAAK,SACzC,IAAEC,GAAQN,GACV,MAAEO,EAAK,WAAEC,GAAeP,EAAKQ,kBAC7BC,EAAeF,EAAU,SACd,IAAfA,EAAmB,GAAK,KAAG,qBACRF,EAAG,IACxB,OACE,gBAAC,IAAM,CAACK,UAAQ,EAACN,MAAOH,GACtB,2BACEU,UAAU,YACVC,WAAS,EACTC,SAAS,6BAET,8BACE,sBAAIC,SAAS,YAAYL,IAE3B,sBAAIM,MAAO,CAAEC,UAAU,SAClBV,EAAMW,KAAI,IAAe,IAAd,KAAEC,GAAM,EAChB,MAAM,KAAEC,GAASD,EAAKE,QAChB,MAAEhB,GAAUc,EAAKG,YACvB,OACI,sBAAIC,IAAKH,GACT,2BACIR,UAAU,iBACVC,WAAS,EACTC,SAAS,6BAET,8BACA,6BAAQK,EAAKG,YAAYE,YACzB,0BACI,gBAAC,EAAAC,KAAI,CAACC,GAAIN,EAAML,SAAS,OACzB,wBAAMA,SAAS,YAAU,MAAKV,KAGlC,sCAAcc,EAAKG,YAAYK,KAAKT,KAAKZ,GAAiB,gBAAC,EAAAmB,KAAI,CAACF,IAAKjB,EAAKoB,GAAE,SAAWpB,EAAOM,UAAU,WAAS,OAAMN,OAGvH,+BACA,qBACIsB,wBAAyB,CACzBC,OAAQV,EAAKW,SAAW,QAExBf,SAAS,kBAIZ,IAGb,gBAAC,EAAAU,KAAI,CAACb,UAAU,YAAYc,GAAG,KAAG,cAAkB,MAAG,gBAAC,EAAAD,KAAI,CAACb,UAAU,YAAYc,GAAG,SAAO,cAG5F,C","sources":["webpack://gatsby-starter-blog/./src/templates/tag.js"],"sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\n\n// Components\nimport { Link, graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\n\n\nconst TagPosts = ({ pageContext, data }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const { tag } = pageContext\n  const { edges, totalCount } = data.allMarkdownRemark\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? \"\" : \"s\"\n  } tagged with üè∑Ô∏è \"${tag}\"`\n  return (\n    <Layout location title={siteTitle}>\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h1 itemProp=\"headline\">{tagHeader}</h1>\n        </header>\n        <ol style={{ listStyle: `none` }}>\n            {edges.map(({ node }) => {\n                const { slug } = node.fields\n                const { title } = node.frontmatter\n                return (\n                    <li key={slug}>\n                    <article\n                        className=\"post-list-item\"\n                        itemScope\n                        itemType=\"http://schema.org/Article\"\n                    >\n                        <header>\n                        <small>{node.frontmatter.createDate}</small>\n                        <h2>\n                            <Link to={slug} itemProp=\"url\">\n                            <span itemProp=\"headline\">üìù {title}</span>\n                            </Link>\n                        </h2>\n                        <small>tags: {node.frontmatter.tags.map((tag) => {return (<Link key={tag} to={`/tags/${tag}`} className=\"taglink\">üè∑Ô∏è {tag}</Link>)})}</small>\n\n                        </header>\n                        <section>\n                        <p\n                            dangerouslySetInnerHTML={{\n                            __html: node.excerpt || \"aaaa\",\n                            }}\n                            itemProp=\"description\"\n                        />\n                        </section>\n                    </article>\n                    </li>\n                )\n            })}\n            <Link className=\"blog-link\" to=\"/\">üìù TopPage</Link> / <Link className=\"blog-link\" to=\"/tags\">üè∑Ô∏è Tags</Link>\n        </ol>\n      </article>\n    </Layout>\n  )\n}\n\nTagPosts.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\n\nexport default TagPosts\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    site {\n        siteMetadata {\n            title\n        }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: {frontmatter: {createDate: DESC}}\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            createDate(formatString: \"MMMM DD, YYYY\")\n            title\n            tags\n          }\n          excerpt\n        }\n      }\n    }\n  }\n`"],"names":["pageContext","data","siteTitle","site","siteMetadata","title","tag","edges","totalCount","allMarkdownRemark","tagHeader","location","className","itemScope","itemType","itemProp","style","listStyle","map","node","slug","fields","frontmatter","key","createDate","Link","to","tags","dangerouslySetInnerHTML","__html","excerpt"],"sourceRoot":""}