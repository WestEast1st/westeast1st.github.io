{"version":3,"file":"component---src-pages-index-js-2a1104539a94426ff333.js","mappings":"iKAqDA,IA1CY,KAAO,IAAD,IAChB,MAAMA,GAAOC,EAAAA,EAAAA,gBAAe,cAiBtBC,EAA+B,QAAzB,EAAGF,EAAKG,KAAKC,oBAAY,aAAtB,EAAwBF,OACF,QAAzB,EAAGF,EAAKG,KAAKC,oBAAY,OAAtB,EAAwBC,OAEvC,OACE,uBAAKC,UAAU,OACb,gBAAC,EAAAC,EAAW,CACVD,UAAU,aACVE,OAAO,QACPC,QAAS,CAAC,OAAQ,OAAQ,QAC1BC,IAAI,6BACJC,MAAO,GACPC,OAAQ,GACRC,QAAS,GACTC,IAAI,kBAAiB,sBAEtBZ,aAAM,EAANA,EAAQa,OACP,uCACa,8BAASb,EAAOa,MAAc,OAAIb,aAAM,EAANA,EAAQc,UAAW,MAGhE,C,+CCIV,IA3CY,IAAuC,IAAD,UAArC,YAAEC,EAAW,MAAEC,EAAK,SAAEC,GAAU,EAC3C,MAAM,KAAEhB,IAASF,EAAAA,EAAAA,gBAAe,cAiB1BmB,EAAkBH,GAAed,EAAKC,aAAaa,YACnDI,EAAgC,QAApB,EAAGlB,EAAKC,oBAAY,aAAjB,EAAmBc,MAGxC,OACE,gCACE,6BAAQG,EAAkBH,EAAK,MAAMG,EAAiBH,GACtD,wBAAMH,KAAK,cAAcO,QAASF,IAClC,wBAAMG,SAAS,WAAWD,QAASJ,IACnC,wBAAMK,SAAS,iBAAiBD,QAASF,IACzC,wBAAMG,SAAS,WAAWD,QAAYnB,EAAKC,aAAaoB,QAAlBrB,gCACtC,wBAAMoB,SAAS,eAAeD,QAASD,IACvC,wBAAME,SAAS,UAAUD,QAAQ,YACjC,wBAAMP,KAAK,eAAeO,QAAQ,YAClC,wBACEP,KAAK,kBACLO,SAA0B,QAAjB,EAAAnB,EAAKC,oBAAY,OAAQ,QAAR,EAAjB,EAAmBC,cAAM,WAAR,EAAjB,EAA2BoB,UAAO,KAE7C,wBAAMV,KAAK,gBAAgBO,QAASJ,IACpC,wBAAMH,KAAK,sBAAsBO,QAASF,IACzCD,EACA,C,oJCnBP,MA3Ba,KACT,MAAMnB,GAAOC,EAAAA,EAAAA,gBAAe,cAe5B,OAJAD,EAAK0B,kBAAkBC,MAAMC,MAAK,CAACC,EAAQC,IAChCA,EAAOC,WAAaF,EAAOE,aAIlC,oCAEK/B,EAAK0B,kBAAkBC,MAAMK,KAAIC,GACtB,gBAAC,EAAAC,KAAI,CAAC5B,UAAU,UAAU6B,IAAKF,EAAIG,WAAYC,GAAE,SAAWJ,EAAIG,YAAa,OAAMH,EAAIG,cAEnG,gBAAC,EAAAF,KAAI,CAACG,GAAG,SAAO,eAChB,ECwCZ,MA1DkB,IAAyB,IAAD,MAAvB,KAAErC,EAAI,SAAEsC,GAAU,EACnC,MAAMC,GAAkC,QAAtB,EAAAvC,EAAKG,KAAKC,oBAAY,aAAtB,EAAwBc,QAAK,QACzCsB,EAAQxC,EAAK0B,kBAAkBe,MAErC,OAAqB,IAAjBD,EAAME,OAEN,gBAAC,IAAM,CAACJ,SAAUA,EAAUpB,MAAOqB,GACjC,gBAAC,IAAG,MACJ,uLAUJ,gBAAC,IAAM,CAACD,SAAUA,EAAUpB,MAAOqB,GACjC,gBAAC,EAAI,MACL,sBAAII,MAAO,CAAEC,UAAU,SACpBJ,EAAMR,KAAIa,IACT,GAA+B,aAA3BA,EAAKC,YAAY5B,MAAsB,OAC3C,MAAMA,EAAQ2B,EAAKC,YAAY5B,OAAS2B,EAAKE,OAAOC,KAEpD,OACE,sBAAIb,IAAKU,EAAKE,OAAOC,MACnB,2BACE1C,UAAU,iBACV2C,WAAS,EACTC,SAAS,6BAET,8BACE,6BAAQL,EAAKC,YAAYK,MAAMN,EAAKC,YAAYM,YAChD,0BACE,gBAAC,EAAAlB,KAAI,CAACG,GAAIQ,EAAKE,OAAOC,KAAMK,SAAS,OACnC,wBAAMA,SAAS,YAAU,MAAKnC,KAGlC,sCAAc2B,EAAKC,YAAYQ,KAAKtB,KAAKC,GAAiB,gBAAC,EAAAC,KAAI,CAAC5B,UAAU,UAAU6B,IAAKF,EAAKI,GAAE,SAAWJ,GAAM,OAAOA,OAE1H,+BACE,qBACEsB,wBAAyB,CACvBC,OAAQX,EAAKC,YAAY7B,aAAe4B,EAAKY,SAE/CJ,SAAS,kBAIZ,KAIJ,EAWN,MAAMK,EAAO,IAAM,gBAAC,IAAG,CAACxC,MAAM,a","sources":["webpack://gatsby-starter-blog/./src/components/bio.js","webpack://gatsby-starter-blog/./src/components/seo.js","webpack://gatsby-starter-blog/./src/components/tags.js","webpack://gatsby-starter-blog/./src/pages/index.js"],"sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  const social = data.site.siteMetadata?.social\n\n  return (\n    <div className=\"bio\">\n      <StaticImage\n        className=\"bio-avatar\"\n        layout=\"fixed\"\n        formats={[\"auto\", \"webp\", \"avif\"]}\n        src=\"../images/profile-pic.jpeg\"\n        width={50}\n        height={50}\n        quality={95}\n        alt=\"Profile picture\"\n      />\n      {author?.name && (\n        <p>\n          Written by <strong>{author.name}</strong> / {author?.summary || null}\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","/**\n * SEO component that queries for data with\n * Gatsby's PageQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, title, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            siteUrl\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n  const ogImage = \"../images/profile-pic.jpeg\"\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} - ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:image\" content={`${site.siteMetadata.siteUrl}/${ogImage}`} />\n      <meta property=\"og:site_name\" content={defaultTitle} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:creator\"\n        content={site.siteMetadata?.social?.twitter || ``}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","import * as React from \"react\"\nimport { useStaticQuery, graphql, Link } from \"gatsby\"\n\nconst Tags = () => {\n    const data = useStaticQuery(graphql`\n    query TagQuery {\n        allMarkdownRemark(limit: 10){\n          group(field: {frontmatter: {tags: SELECT}}){\n            totalCount\n            fieldValue\n          }\n        }\n      }\n    `)\n\n    data.allMarkdownRemark.group.sort((groupA, groupB) => {\n        return groupB.totalCount - groupA.totalCount\n    })\n\n    return (\n        <p>\n            TagList: \n            {data.allMarkdownRemark.group.map(tag => {\n                return (<Link className=\"taglink\" key={tag.fieldValue} to={`/tags/${tag.fieldValue}`}>üè∑Ô∏è {tag.fieldValue}</Link>)\n            })}\n            <Link to=\"/tags\">and more...</Link>\n        </p>\n      )\n}\n\nexport default Tags","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport Tags from \"../components/tags\"\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMarkdownRemark.nodes\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <Bio />\n        <p>\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\n          gatsby-config.js).\n        </p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Tags />\n      <ol style={{ listStyle: `none` }}>\n        {posts.map(post => {\n          if (post.frontmatter.title === \"About Me\") return\n          const title = post.frontmatter.title || post.fields.slug\n\n          return (\n            <li key={post.fields.slug}>\n              <article\n                className=\"post-list-item\"\n                itemScope\n                itemType=\"http://schema.org/Article\"\n              >\n                <header>\n                  <small>{post.frontmatter.date||post.frontmatter.createDate}</small>\n                  <h2>\n                    <Link to={post.fields.slug} itemProp=\"url\">\n                      <span itemProp=\"headline\">üìù {title}</span>\n                    </Link>\n                  </h2>\n                  <small>tags: {post.frontmatter.tags.map((tag) => {return (<Link className=\"taglink\" key={tag} to={`/tags/${tag}`} >üè∑Ô∏è {tag}</Link>)})}</small>\n                </header>\n                <section>\n                  <p\n                    dangerouslySetInnerHTML={{\n                      __html: post.frontmatter.description || post.excerpt,\n                    }}\n                    itemProp=\"description\"\n                  />\n                </section>\n              </article>\n            </li>\n          )\n        })}\n      </ol>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\n/**\n * Head export to define metadata for the page\n *\n * See: https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-head/\n */\nexport const Head = () => <Seo title=\"All posts\" />\n\nexport const pageQuery = graphql`\n  {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { frontmatter: { createDate: DESC } }\n    ) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          createDate(formatString: \"MMMM DD, YYYY\")\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          tags\n          description\n        }\n      }\n    }\n  }\n`\n"],"names":["data","useStaticQuery","author","site","siteMetadata","social","className","S","layout","formats","src","width","height","quality","alt","name","summary","description","title","children","metaDescription","defaultTitle","content","property","siteUrl","twitter","allMarkdownRemark","group","sort","groupA","groupB","totalCount","map","tag","Link","key","fieldValue","to","location","siteTitle","posts","nodes","length","style","listStyle","post","frontmatter","fields","slug","itemScope","itemType","date","createDate","itemProp","tags","dangerouslySetInnerHTML","__html","excerpt","Head"],"sourceRoot":""}