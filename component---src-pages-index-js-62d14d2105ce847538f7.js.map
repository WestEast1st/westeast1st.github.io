{"version":3,"file":"component---src-pages-index-js-62d14d2105ce847538f7.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/components/common/articleIcon.js","webpack://gatsby-starter-blog/./src/components/common/bio.js","webpack://gatsby-starter-blog/./src/components/common/postTag.js","webpack://gatsby-starter-blog/./src/components/common/seo.js","webpack://gatsby-starter-blog/./src/components/posts/postCard.js","webpack://gatsby-starter-blog/./src/components/posts/blogPosts.js","webpack://gatsby-starter-blog/./src/components/posts/tags.js","webpack://gatsby-starter-blog/./src/pages/index.js"],"sourcesContent":["import * as React from \"react\"\n\nconst ArticleIcon = ({tags}) => {\n    const arrayConverter = ((t)=>{\n        if (!Array.isArray(t)) return new Array(t)\n        return t\n    })\n\n    const icon = ((tags) => {\n        tags = tags.map((tag) => {\n            return tag.toLowerCase()\n        })\n        if (tags.includes(\"Letter\".toLowerCase())) return \"✉️\"\n        if (tags.includes(\"linux\".toLowerCase())) return \"🐧\"\n        if (tags.includes(\"windows\".toLowerCase())) return \"🪟\"\n        if (tags.includes(\"microsoft\".toLowerCase())) return \"🪟\"\n        if (tags.includes(\"macos\".toLowerCase())) return \"🍎\"\n        if (tags.includes(\"android\".toLowerCase())) return \"🤖\"\n        if (tags.includes(\"ios\".toLowerCase())) return \"📱\"\n        if (tags.includes(\"web\".toLowerCase())) return \"🌐\"\n        if (tags.includes(\"network\".toLowerCase())) return \"🌐\"\n        if (tags.includes(\"cloud\".toLowerCase())) return \"☁️\"\n        if (tags.includes(\"aws\".toLowerCase())) return \"☁️\"\n        if (tags.includes(\"gcp\".toLowerCase())) return \"☁️\"\n        if (tags.includes(\"azure\".toLowerCase())) return \"☁️\"\n        if (tags.includes(\"programming\".toLowerCase())) return \"👨‍💻\"\n        if (tags.includes(\"develop\".toLowerCase())) return \"⚙️\"\n        if (tags.includes(\"operation\".toLowerCase())) return \"⚙️\"\n        if (tags.includes(\"bughunt\".toLowerCase())) return \"🐝\"\n        if (tags.includes(\"security\".toLowerCase())) return \"🔐\"\n        if (tags.includes(\"hacking\".toLowerCase())) return \"🔐\"\n        if (tags.includes(\"ctf\".toLowerCase())) return \"🚩\"\n        if (tags.includes(\"writeup\".toLowerCase())) return \"🚩\"\n        if (tags.includes(\"crypto\".toLowerCase())) return \"🔑\"\n        if (tags.includes(\"forensic\".toLowerCase())) return \"🔍\"\n        if (tags.includes(\"reversing\".toLowerCase())) return \"🔎\"\n        if (tags.includes(\"pwn\".toLowerCase())) return \"🔫\"\n        if (tags.includes(\"web\".toLowerCase())) return \"🌐\"\n        if (tags.includes(\"misc\".toLowerCase())) return \"🔧\"\n        if (tags.includes(\"miscellaneous\".toLowerCase())) return \"🔧\"\n        if (tags.includes(\"diary\".toLowerCase())) return \"📔\"\n        if (tags.includes(\"note\".toLowerCase())) return \"📝\"\n        if (tags.includes(\"post\".toLowerCase())) return \"📖\"\n        if (tags.includes(\"blog\".toLowerCase())) return \"📖\"\n        if (tags.includes(\"article\".toLowerCase())) return \"📖\"\n        if (tags.includes(\"review\".toLowerCase())) return \"📖\"\n        if (tags.includes(\"book\".toLowerCase())) return \"📖\"\n        if (tags.includes(\"movie\".toLowerCase())) return \"🎬\"\n        if (tags.includes(\"anime\".toLowerCase())) return \"🎬\"\n        if (tags.includes(\"game\".toLowerCase())) return \"🎮\"\n        if (tags.includes(\"music\".toLowerCase())) return \"🎵\"\n        if (tags.includes(\"photo\".toLowerCase())) return \"📷\"\n        if (tags.includes(\"picture\".toLowerCase())) return \"📷\"\n        if (tags.includes(\"image\".toLowerCase())) return \"🌅\"\n        if (tags.includes(\"video\".toLowerCase())) return \"📹\"\n        return \"🏷️\"\n    })(arrayConverter(tags))\n    return (<span>{icon}</span>)\n}\n\nexport default ArticleIcon","/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n\n  return (\n    <div className=\"bio\">\n      <StaticImage\n        className=\"bio-avatar\"\n        layout=\"fixed\"\n        formats={[\"auto\", \"webp\", \"avif\"]}\n        src=\"../../images/profile-pic.jpeg\"\n        width={50}\n        height={50}\n        quality={95}\n        alt=\"Profile picture\"\n      />\n      {author?.name && (\n        <p>\n          Written by <strong>{author.name}</strong> / {author?.summary || null}\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport ArticleIcon from \"./articleIcon\"\n\nconst PostTag = ({ postTagName }) => {\n  \n    return (\n      <Link className=\"taglink\" to={`/tags/${postTagName}`}><ArticleIcon tags={postTagName}/> {postTagName}</Link>\n    )\n  }\n  \n  export default PostTag\n  ","/**\n * SEO component that queries for data with\n * Gatsby's PageQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, title, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            siteUrl\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n  const ogImage = \"../images/profile-pic.jpeg\"\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} - ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:image\" content={`${site.siteMetadata.siteUrl}/${ogImage}`} />\n      <meta property=\"og:site_name\" content={defaultTitle} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:creator\"\n        content={site.siteMetadata?.social?.twitter || ``}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport ArticleIcon from \"../common/articleIcon\"\nimport PostTag from \"../common/postTag\"\nconst PostCard = ({post, title}) => {\n    return (\n        <article\n            className=\"post-list-item\"\n            itemScope\n            itemType=\"http://schema.org/Article\"\n        > \n            <header>\n                <small>🕒 {post.frontmatter.date||post.frontmatter.createDate}</small>\n                <h2>\n                    <Link to={post.fields.slug} itemProp=\"url\">\n                    <span itemProp=\"headline\"><ArticleIcon tags={post.frontmatter.tags}/> {title}</span>\n                    </Link>\n                </h2>\n                <small>tags: {\n                    post.frontmatter.tags.map((tag) => {\n                        return (\n                            <PostTag key={tag} postTagName={tag} />\n                        )\n                    }) || \"\"\n                }\n                </small>\n            </header>\n            <section>\n            <p\n                dangerouslySetInnerHTML={{\n                __html: post.frontmatter.description || post.excerpt,\n                }}\n                itemProp=\"description\"\n            />\n            </section>\n        </article>\n    )\n    \n\n}\n\nexport default PostCard","import * as React from \"react\"\nimport PostCard from \"./postCard\"\n\nconst BlogPosts = ({posts}) => {\n    return (\n        <ol style={{ listStyle: `none` }}>\n            {posts.map(post => {\n            if (post.frontmatter.title === \"About Me\") return null\n            const title = post.frontmatter.title || post.fields.slug\n\n            return (\n                <li key={post.fields.slug}>\n                <PostCard post={post} title={title} />\n                </li>\n            )\n            })}\n        </ol>\n  )\n}\nexport default BlogPosts","import * as React from \"react\"\nimport { useStaticQuery, graphql, Link } from \"gatsby\"\nimport PostTag from \"../common/postTag\"\nconst Tags = () => {\n    const data = useStaticQuery(graphql`\n    query TagQuery {\n        allMarkdownRemark(limit: 10){\n          group(field: {frontmatter: {tags: SELECT}}){\n            totalCount\n            fieldValue\n          }\n        }\n      }\n    `)\n\n    data.allMarkdownRemark.group.sort((groupA, groupB) => {\n        return groupB.totalCount - groupA.totalCount\n    })\n\n    return (\n        <p>\n            TagList: \n            {data.allMarkdownRemark.group.map(tag => {\n                return (<PostTag key={tag.fieldValue} postTagName={tag.fieldValue} />)\n            })}\n            <Link to=\"/tags\">and more...</Link>\n        </p>\n      )\n}\n\nexport default Tags","import * as React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Bio from \"../components/common/bio\"\nimport Layout from \"../components/common/layout\"\nimport Seo from \"../components/common/seo\"\nimport Tags from \"../components/posts/tags\"\nimport BlogPosts from \"../components/posts/blogPosts\"\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMarkdownRemark.nodes\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <Bio />\n        <p>\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\n          gatsby-config.js).\n        </p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Tags />\n      <ol style={{ listStyle: `none` }}>\n        <BlogPosts posts={posts} />\n      </ol>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\n/**\n * Head export to define metadata for the page\n *\n * See: https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-head/\n */\nexport const Head = () => <Seo title=\"All posts\" />\n\nexport const pageQuery = graphql`\n  {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { frontmatter: { createDate: DESC } }\n    ) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          createDate(formatString: \"MMMM DD, YYYY\")\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          tags\n          description\n        }\n        excerpt\n      }\n    }\n  }\n`\n"],"names":["tags","icon","map","tag","toLowerCase","includes","t","Array","isArray","author","useStaticQuery","site","siteMetadata","className","S","layout","formats","src","width","height","quality","alt","name","summary","postTagName","Link","to","description","title","children","metaDescription","defaultTitle","content","property","siteUrl","social","twitter","post","itemScope","itemType","frontmatter","date","createDate","fields","slug","itemProp","key","dangerouslySetInnerHTML","__html","excerpt","posts","style","listStyle","data","allMarkdownRemark","group","sort","groupA","groupB","totalCount","fieldValue","location","siteTitle","nodes","length","Head"],"sourceRoot":""}