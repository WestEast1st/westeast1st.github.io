{"version":3,"file":"component---src-pages-index-js-23ef9d824649369ca0e2.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/components/articleIcon.js","webpack://gatsby-starter-blog/./src/components/bio.js","webpack://gatsby-starter-blog/./src/components/blogPosts.js","webpack://gatsby-starter-blog/./src/components/postCard.js","webpack://gatsby-starter-blog/./src/components/seo.js","webpack://gatsby-starter-blog/./src/components/tags.js","webpack://gatsby-starter-blog/./src/pages/index.js"],"sourcesContent":["import * as React from \"react\"\n\nconst ArticleIcon = ({tags}) => {\n    const arrayConverter = ((t)=>{\n        if (!Array.isArray(t)) return new Array(t)\n        return t\n    })\n\n    const icon = ((tags) => {\n        tags = tags.map((tag) => {\n            return tag.toLowerCase()\n        })\n        if (tags.includes(\"linux\".toLowerCase())) return \"🐧\"\n        if (tags.includes(\"windows\".toLowerCase())) return \"🪟\"\n        if (tags.includes(\"macos\".toLowerCase())) return \"🍎\"\n        if (tags.includes(\"android\".toLowerCase())) return \"🤖\"\n        if (tags.includes(\"ios\".toLowerCase())) return \"📱\"\n        if (tags.includes(\"web\".toLowerCase())) return \"🌐\"\n        if (tags.includes(\"network\".toLowerCase())) return \"🌐\"\n        if (tags.includes(\"programming\".toLowerCase())) return \"👨‍💻\"\n        if (tags.includes(\"security\".toLowerCase())) return \"🔐\"\n        if (tags.includes(\"hacking\".toLowerCase())) return \"🔐\"\n        if (tags.includes(\"ctf\".toLowerCase())) return \"🚩\"\n        if (tags.includes(\"writeup\".toLowerCase())) return \"🚩\"\n        if (tags.includes(\"crypto\".toLowerCase())) return \"🔑\"\n        if (tags.includes(\"forensic\".toLowerCase())) return \"🔍\"\n        if (tags.includes(\"reversing\".toLowerCase())) return \"🔎\"\n        if (tags.includes(\"pwn\".toLowerCase())) return \"🔫\"\n        if (tags.includes(\"web\".toLowerCase())) return \"🌐\"\n        if (tags.includes(\"misc\".toLowerCase())) return \"🔧\"\n        if (tags.includes(\"miscellaneous\".toLowerCase())) return \"🔧\"\n        if (tags.includes(\"diary\".toLowerCase())) return \"📔\"\n        if (tags.includes(\"note\".toLowerCase())) return \"📝\"\n        if (tags.includes(\"post\".toLowerCase())) return \"📖\"\n        if (tags.includes(\"blog\".toLowerCase())) return \"📖\"\n        if (tags.includes(\"article\".toLowerCase())) return \"📖\"\n        if (tags.includes(\"review\".toLowerCase())) return \"📖\"\n        if (tags.includes(\"book\".toLowerCase())) return \"📖\"\n        if (tags.includes(\"movie\".toLowerCase())) return \"🎬\"\n        if (tags.includes(\"anime\".toLowerCase())) return \"🎬\"\n        if (tags.includes(\"game\".toLowerCase())) return \"🎮\"\n        if (tags.includes(\"music\".toLowerCase())) return \"🎵\"\n        if (tags.includes(\"photo\".toLowerCase())) return \"📷\"\n        if (tags.includes(\"picture\".toLowerCase())) return \"📷\"\n        if (tags.includes(\"image\".toLowerCase())) return \"🌅\"\n        if (tags.includes(\"video\".toLowerCase())) return \"📹\"\n        return \"🏷️\"\n    })(arrayConverter(tags))\n    return (<span>{icon}</span>)\n}\n\nexport default ArticleIcon","/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { StaticImage } from \"gatsby-plugin-image\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n          social {\n            twitter\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const author = data.site.siteMetadata?.author\n  const social = data.site.siteMetadata?.social\n\n  return (\n    <div className=\"bio\">\n      <StaticImage\n        className=\"bio-avatar\"\n        layout=\"fixed\"\n        formats={[\"auto\", \"webp\", \"avif\"]}\n        src=\"../images/profile-pic.jpeg\"\n        width={50}\n        height={50}\n        quality={95}\n        alt=\"Profile picture\"\n      />\n      {author?.name && (\n        <p>\n          Written by <strong>{author.name}</strong> / {author?.summary || null}\n        </p>\n      )}\n    </div>\n  )\n}\n\nexport default Bio\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport PostCard from \"../components/postCard\"\n\nconst BlogPosts = ({posts}) => {\n    return (\n        <ol style={{ listStyle: `none` }}>\n            {posts.map(post => {\n            if (post.frontmatter.title === \"About Me\") return\n            const title = post.frontmatter.title || post.fields.slug\n\n            return (\n                <li key={post.fields.slug}>\n                <PostCard post={post} title={title} />\n                </li>\n            )\n            })}\n        </ol>\n  )\n}\nexport default BlogPosts","import * as React from \"react\"\nimport { Link } from \"gatsby\"\nimport ArticleIcon from \"./articleIcon\"\n\nconst PostCard = ({post, title}) => {\n    return (\n        <article\n            className=\"post-list-item\"\n            itemScope\n            itemType=\"http://schema.org/Article\"\n        > \n            <header>\n                <small>🕒 {post.frontmatter.date||post.frontmatter.createDate}</small>\n                <h2>\n                    <Link to={post.fields.slug} itemProp=\"url\">\n                    <span itemProp=\"headline\"><ArticleIcon tags={post.frontmatter.tags}/> {title}</span>\n                    </Link>\n                </h2>\n                <small>tags: {\n                    post.frontmatter.tags.map((tag) => {\n                        return (\n                            <Link className=\"taglink\" key={tag} to={`/tags/${tag}`} >\n                                    <ArticleIcon tags={tag}/> {tag}\n                            </Link>\n                        )\n                    }) || \"\"\n                }\n                </small>\n            </header>\n            <section>\n            <p\n                dangerouslySetInnerHTML={{\n                __html: post.frontmatter.description || post.excerpt,\n                }}\n                itemProp=\"description\"\n            />\n            </section>\n        </article>\n    )\n    \n\n}\n\nexport default PostCard","/**\n * SEO component that queries for data with\n * Gatsby's PageQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, title, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            siteUrl\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n  const ogImage = \"../images/profile-pic.jpeg\"\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} - ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:image\" content={`${site.siteMetadata.siteUrl}/${ogImage}`} />\n      <meta property=\"og:site_name\" content={defaultTitle} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:creator\"\n        content={site.siteMetadata?.social?.twitter || ``}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","import * as React from \"react\"\nimport { useStaticQuery, graphql, Link } from \"gatsby\"\n\nconst Tags = () => {\n    const data = useStaticQuery(graphql`\n    query TagQuery {\n        allMarkdownRemark(limit: 10){\n          group(field: {frontmatter: {tags: SELECT}}){\n            totalCount\n            fieldValue\n          }\n        }\n      }\n    `)\n\n    data.allMarkdownRemark.group.sort((groupA, groupB) => {\n        return groupB.totalCount - groupA.totalCount\n    })\n\n    return (\n        <p>\n            TagList: \n            {data.allMarkdownRemark.group.map(tag => {\n                return (<Link className=\"taglink\" key={tag.fieldValue} to={`/tags/${tag.fieldValue}`}>🏷️ {tag.fieldValue}</Link>)\n            })}\n            <Link to=\"/tags\">and more...</Link>\n        </p>\n      )\n}\n\nexport default Tags","import * as React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport Tags from \"../components/tags\"\nimport BlogPosts from \"../components/blogPosts\"\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMarkdownRemark.nodes\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <Bio />\n        <p>\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\n          gatsby-config.js).\n        </p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Tags />\n      <ol style={{ listStyle: `none` }}>\n        <BlogPosts posts={posts} />\n      </ol>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\n/**\n * Head export to define metadata for the page\n *\n * See: https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-head/\n */\nexport const Head = () => <Seo title=\"All posts\" />\n\nexport const pageQuery = graphql`\n  {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { frontmatter: { createDate: DESC } }\n    ) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          createDate(formatString: \"MMMM DD, YYYY\")\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          tags\n          description\n        }\n        excerpt\n      }\n    }\n  }\n`\n"],"names":["tags","icon","map","tag","toLowerCase","includes","t","Array","isArray","data","useStaticQuery","author","site","siteMetadata","social","className","S","layout","formats","src","width","height","quality","alt","name","summary","posts","style","listStyle","post","frontmatter","title","fields","slug","key","itemScope","itemType","date","createDate","Link","to","itemProp","dangerouslySetInnerHTML","__html","description","excerpt","children","metaDescription","defaultTitle","content","property","siteUrl","twitter","allMarkdownRemark","group","sort","groupA","groupB","totalCount","fieldValue","location","siteTitle","nodes","length","Head"],"sourceRoot":""}